name: Get versions

on:
  workflow_call:
    secrets:
      token:
        required: true
    outputs:
      TAGGED_VERSION:
        description: "Determine version that being tagged on this release"
        value: ${{ jobs.get-versions.outputs.TAGGED_VERSION }}
      UPCOMING_VERSION:
        description: "Determine version that will be tagged on the next release"
        value: ${{ jobs.get-versions.outputs.UPCOMING_VERSION }}

jobs:
  get-versions:
    runs-on: ${{ vars.RUNNER }}
    name: Get versions
    permissions:
      contents: read
    outputs:
      TAGGED_VERSION: ${{ steps.id_versions.outputs.TAGGED_VERSION }}
      UPCOMING_VERSION: ${{ steps.id_versions.outputs.UPCOMING_VERSION }}
    steps:
      - name: Checkout geoips repo default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: ${{ vars.GEOIPS_ORGANIZATION }}/geoips
          ref: ${{ vars.GEOIPS_DEFAULT_BRANCH }}
          token: ${{ secrets.token }}
          path: geoips_repo_default_branch

      - name: Checkout current plugin current branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.token }}
          path: current_repo_current_branch

      - name: Identify versions from GeoIPS default branch
        id: id_versions
        run: |
          if [[ "${{ github.event.repository.name }}" == "geoips" ]]; then
            version_path=./current_repo_current_branch/.github/versions
          else
            version_path=./geoips_repo_default_branch/.github/versions
          fi
          echo "Pulling versions out of GeoIPS repo version files"
          echo "tagged_version=`cat ${version_path}/tagged_version`"
          echo "upcoming_version=`cat ${version_path}/upcoming_version`"

          if [[ -f ${version_path}/tagged_version ]]; then
            tagged_version=`cat ${version_path}/tagged_version`
          else
            tagged_version=latest
          fi
          upcoming_version=`cat ${version_path}/upcoming_version`

          echo "TAGGED_VERSION=${tagged_version}"
          echo "TAGGED_VERSION=${tagged_version}" >> $GITHUB_ENV
          echo "TAGGED_VERSION=${tagged_version}" >> $GITHUB_OUTPUT
          echo "UPCOMING_VERSION=${upcoming_version}"
          echo "UPCOMING_VERSION=${upcoming_version}" >> $GITHUB_ENV
          echo "UPCOMING_VERSION=${upcoming_version}" >> $GITHUB_OUTPUT
